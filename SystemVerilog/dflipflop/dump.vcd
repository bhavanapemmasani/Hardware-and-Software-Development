$date
Sun May 12 21:09:20 2024
$end
$version
Riviera-PRO Version 2023.04.112.8911
$end
$timescale
1 ns
$end

$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # d $end
$var reg 1 $ q $end
$var reg 1 % qbar $end
$upscope $end


$scope module uvm_pkg $end
$var integer 32 & UVM_UNBOUNDED_CONNECTIONS $end
$var reg 1 ' uvm_start_uvm_declarations $end
$var integer 32 ( uvm_global_random_seed $end
$var parameter 32 ) UVM_HDL_MAX_WIDTH [31:0] $end
$var parameter 32 * UVM_STREAMBITS [31:0] $end
$var parameter 32 + UVM_RADIX [31:0] $end
$var parameter 32 , UVM_MACRO_NUMFLAGS [31:0] $end
$var parameter 32 - UVM_DEFAULT [31:0] $end
$var parameter 32 . UVM_ALL_ON [31:0] $end
$var parameter 32 / UVM_FLAGS_ON [31:0] $end
$var parameter 32 0 UVM_FLAGS_OFF [31:0] $end
$var parameter 32 1 UVM_COPY [31:0] $end
$var parameter 32 2 UVM_NOCOPY [31:0] $end
$var parameter 32 3 UVM_COMPARE [31:0] $end
$var parameter 32 4 UVM_NOCOMPARE [31:0] $end
$var parameter 32 5 UVM_PRINT [31:0] $end
$var parameter 32 6 UVM_NOPRINT [31:0] $end
$var parameter 32 7 UVM_RECORD [31:0] $end
$var parameter 32 8 UVM_NORECORD [31:0] $end
$var parameter 32 9 UVM_PACK [31:0] $end
$var parameter 32 : UVM_NOPACK [31:0] $end
$var parameter 32 ; UVM_PHYSICAL [31:0] $end
$var parameter 32 < UVM_ABSTRACT [31:0] $end
$var parameter 32 = UVM_READONLY [31:0] $end
$var parameter 32 > UVM_NODEFPRINT [31:0] $end
$var parameter 32 ? UVM_MACRO_EXTRAS [31:0] $end
$var parameter 32 @ UVM_FLAGS [31:0] $end
$var parameter 32 A UVM_UNPACK [31:0] $end
$var parameter 32 B UVM_CHECK_FIELDS [31:0] $end
$var parameter 32 C UVM_END_DATA_EXTRA [31:0] $end
$var parameter 32 D UVM_START_FUNCS [31:0] $end
$var parameter 32 E UVM_SET [31:0] $end
$var parameter 32 F UVM_SETINT [31:0] $end
$var parameter 32 G UVM_SETOBJ [31:0] $end
$var parameter 32 H UVM_SETSTR [31:0] $end
$var parameter 32 I UVM_END_FUNCS [31:0] $end
$var parameter 32 J UVM_STR_CRC_POLYNOMIAL [31:0] $end
$var parameter 32 K UVM_STDOUT [31:0] $end
$var parameter 32 L UVM_LOG_UVM_RM_RECORD [31:0] $end
$var parameter 32 M UVM_LINE_WIDTH [31:0] $end
$var parameter 32 N UVM_NUM_LINES [31:0] $end
$var parameter 32 O UVM_SMALL_STRING [31:0] $end
$var parameter 32 P UVM_LARGE_STRING [31:0] $end

$scope function uvm_hdl_check_path $end
$var integer 32 Q uvm_hdl_check_path $end
$upscope $end


$scope function uvm_hdl_deposit $end
$var reg 1024 R value [1023:0] $end
$var integer 32 S uvm_hdl_deposit $end
$upscope $end


$scope function uvm_hdl_force $end
$var reg 1024 T value [1023:0] $end
$var integer 32 U uvm_hdl_force $end
$upscope $end


$scope task uvm_hdl_force_time $end
$var reg 1024 V value [1023:0] $end
$var time 64 W force_time $end
$upscope $end


$scope function uvm_hdl_release_and_read $end
$var reg 1024 X value [1023:0] $end
$var integer 32 Y uvm_hdl_release_and_read $end
$upscope $end


$scope function uvm_hdl_release $end
$var integer 32 Z uvm_hdl_release $end
$upscope $end


$scope function uvm_hdl_read $end
$var reg 1024 [ value [1023:0] $end
$var integer 32 \ uvm_hdl_read $end
$upscope $end


$scope function uvm_dpi_get_next_arg_c $end
$var integer 32 ] init $end
$upscope $end


$scope function uvm_dpi_get_tool_name_c $end
$upscope $end


$scope function uvm_dpi_get_tool_version_c $end
$upscope $end


$scope function uvm_dpi_get_next_arg $end
$var integer 32 ^ init $end
$upscope $end


$scope function uvm_dpi_get_tool_name $end
$upscope $end


$scope function uvm_dpi_get_tool_version $end
$upscope $end


$scope function uvm_dpi_regcomp $end
$upscope $end


$scope function uvm_dpi_regexec $end
$var integer 32 _ uvm_dpi_regexec $end
$upscope $end


$scope function uvm_dpi_regfree $end
$upscope $end


$scope function uvm_re_match $end
$var integer 32 ` uvm_re_match $end
$upscope $end


$scope function uvm_dump_re_cache $end
$upscope $end


$scope function uvm_glob_to_re $end
$upscope $end


$scope function uvm_revision_string $end
$upscope $end


$scope function uvm_radix_to_string $end
$var integer 32 a radix $end
$upscope $end


$scope function uvm_instance_scope $end
$var reg 8 b c [7:0] $end
$var integer 32 c pos $end

$scope begin 1unnblk $end
$var integer 32 d dot_pos $end
$var integer 32 e slash_cnt $end
$var integer 32 f slash_pos $end
$upscope $end

$upscope $end


$scope function uvm_oneway_hash $end
$var integer 32 g seed $end
$var integer 32 h uvm_oneway_hash $end
$var reg 1 i msb $end
$var reg 8 j current_byte [7:0] $end
$var reg 32 k crc1 [31:0] $end
$upscope $end


$scope function uvm_create_random_seed $end
$var integer 32 l uvm_create_random_seed $end
$upscope $end


$scope function uvm_object_value_str $end
$upscope $end


$scope function uvm_leaf_scope $end
$var reg 8 m scope_separator [7:0] $end
$var reg 8 n bracket_match [7:0] $end
$var integer 32 o pos $end
$var integer 32 p bmatches $end
$upscope $end


$scope function get_radix_string_global $end
$var integer 32 q radix $end
$upscope $end


$scope function uvm_bitstream_to_string $end
$var reg 4096 r value [4095:0] $end
$var integer 32 s size $end
$var integer 32 t radix $end

$scope begin 24unnblk $end
$var reg 4096 u _t [4095:0] $end
$upscope $end

$upscope $end


$scope function uvm_integral_to_string $end
$var reg 64 v value [63:0] $end
$var integer 32 w size $end
$var integer 32 x radix $end

$scope begin 26unnblk $end
$var reg 64 y _t [63:0] $end
$upscope $end

$upscope $end


$scope function uvm_vector_to_string $end
$var reg 4096 z value [4095:0] $end
$var integer 32 { size $end
$var integer 32 | radix $end
$upscope $end


$scope function uvm_get_array_index_int $end
$var reg 1 } is_wildcard $end
$var integer 32 ~ uvm_get_array_index_int $end
$var integer 32 !! i $end
$upscope $end


$scope function uvm_get_array_index_string $end
$var reg 1 "! is_wildcard $end
$var integer 32 #! i $end
$upscope $end


$scope function uvm_is_array $end
$var reg 1 $! uvm_is_array $end
$upscope $end


$scope function uvm_has_wildcard $end
$upscope $end


$scope function m_uvm_string_queue_join $end
$upscope $end


$scope task run_test $end
$upscope $end


$scope function global_stop_request $end
$upscope $end


$scope function set_global_timeout $end
$var time 64 %! timeout $end
$var reg 1 &! overridable $end
$upscope $end


$scope function set_global_stop_timeout $end
$var time 64 '! timeout $end
$upscope $end


$scope function uvm_get_report_object $end
$upscope $end


$scope function uvm_report_enabled $end
$var integer 32 (! verbosity $end
$var reg 2 )! severity $end
$var integer 32 *! uvm_report_enabled $end
$upscope $end


$scope function uvm_report $end
$var reg 2 +! severity $end
$var integer 32 ,! verbosity $end
$var integer 32 -! line $end
$var reg 1 .! report_enabled_checked $end
$upscope $end


$scope function m__uvm_report_dpi $end
$var integer 32 /! severity $end
$var integer 32 0! verbosity $end
$var integer 32 1! line $end
$upscope $end


$scope function uvm_report_info $end
$var integer 32 2! verbosity $end
$var integer 32 3! line $end
$var reg 1 4! report_enabled_checked $end
$upscope $end


$scope function uvm_report_warning $end
$var integer 32 5! verbosity $end
$var integer 32 6! line $end
$var reg 1 7! report_enabled_checked $end
$upscope $end


$scope function uvm_report_error $end
$var integer 32 8! verbosity $end
$var integer 32 9! line $end
$var reg 1 :! report_enabled_checked $end
$upscope $end


$scope function uvm_report_fatal $end
$var integer 32 ;! verbosity $end
$var integer 32 <! line $end
$var reg 1 =! report_enabled_checked $end
$upscope $end


$scope function uvm_process_report_message $end
$upscope $end


$scope function uvm_string_to_severity $end
$var reg 2 >! sev $end
$var reg 1 ?! uvm_string_to_severity $end
$upscope $end


$scope function uvm_string_to_action $end
$upscope $end


$scope function set_config_int $end
$var reg 4096 @! value [4095:0] $end
$upscope $end


$scope function set_config_object $end
$var reg 1 A! clone $end
$upscope $end


$scope function set_config_string $end
$upscope $end


$scope function uvm_is_match $end
$var reg 1 B! uvm_is_match $end
$upscope $end


$scope function uvm_string_to_bits $end
$var reg 115200 C! uvm_string_to_bits [115199:0] $end
$upscope $end


$scope function uvm_bits_to_string $end
$var reg 115200 D! str [115199:0] $end
$upscope $end


$scope task uvm_wait_for_nba_region $end
$var integer 32 E! nba $end
$var integer 32 F! next_nba $end
$upscope $end


$scope function uvm_split_string $end
$upscope $end


$scope function uvm_hdl_concat2string $end
$upscope $end

$upscope $end


$scope module std $end

$scope function randomize $end
$var reg 1 G! randomize $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
0!
1"
0#
x$
x%
b11111111111111111111111111111111 &
1'
b1000011111110111011111100011111 (
b10000000000 )
b1000000000000 *
b1111000000000000000000000000 +
b10001 ,
b10101010101 -
b101010101 .
b101010101 /
b0 0
b1 1
b10 2
b100 3
b1000 4
b10000 5
b100000 6
b1000000 7
b10000000 8
b100000000 9
b1000000000 :
b10000000000000 ;
b100000000000000 <
b1000000000000000 =
b10000000000000000 >
b100000000000000000 ?
b100000000000000001 @
b100000000000000010 A
b100000000000000011 B
b100000000000000100 C
b100000000000000101 D
b100000000000000110 E
b100000000000000110 F
b100000000000000111 G
b100000000000001000 H
b100000000000001000 I
b100110000010001110110110110 J
b1 K
b1000010 L
b1111000 M
b1111000 N
b1110111111 O
b11100000111111111 P
b0 Q
bx R
b0 S
bx T
b0 U
bx V
bx W
bx X
b0 Y
b0 Z
bx [
b0 \
b0 ]
b0 ^
b0 _
b0 `
b0 a
b0 b
b0 c
b0 d
b0 e
b0 f
b0 g
b0 h
0i
b0 j
b0 k
b0 l
b0 m
b0 n
b0 o
b0 p
b0 q
bx r
b0 s
b0 t
bx u
bx v
b0 w
b0 x
bx y
bx z
b0 {
b0 |
0}
b0 ~
b0 !!
0"!
b0 #!
0$!
bx %!
0&!
bx '!
b0 (!
b0 )!
b1 *!
b0 +!
b0 ,!
b0 -!
0.!
b0 /!
b0 0!
b0 1!
b0 2!
b100101 3!
14!
b0 5!
b0 6!
07!
b0 8!
b0 9!
0:!
b0 ;!
b0 <!
0=!
b0 >!
0?!
bx @!
0A!
0B!
bx C!
bx D!
b0 E!
b0 F!
0G!
$end
#5
1!
1#
b101000 3!
0$
1%
#10
0"
0!
0#
b101011 3!
#15
1!
b101110 3!
#20
0!
1#
#25
1!
1$
0%
#30
