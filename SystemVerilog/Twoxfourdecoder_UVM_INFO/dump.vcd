$date
Fri May 10 21:42:32 2024
$end
$version
Riviera-PRO Version 2023.04.112.8911
$end
$timescale
1 ns
$end

$scope module tb $end
$var reg 2 ! in [1:0] $end
$var reg 4 " out [3:0] $end
$upscope $end


$scope module uvm_pkg $end
$var integer 32 # UVM_UNBOUNDED_CONNECTIONS $end
$var reg 1 $ uvm_start_uvm_declarations $end
$var integer 32 % uvm_global_random_seed $end
$var parameter 32 & UVM_HDL_MAX_WIDTH [31:0] $end
$var parameter 32 ' UVM_STREAMBITS [31:0] $end
$var parameter 32 ( UVM_RADIX [31:0] $end
$var parameter 32 ) UVM_MACRO_NUMFLAGS [31:0] $end
$var parameter 32 * UVM_DEFAULT [31:0] $end
$var parameter 32 + UVM_ALL_ON [31:0] $end
$var parameter 32 , UVM_FLAGS_ON [31:0] $end
$var parameter 32 - UVM_FLAGS_OFF [31:0] $end
$var parameter 32 . UVM_COPY [31:0] $end
$var parameter 32 / UVM_NOCOPY [31:0] $end
$var parameter 32 0 UVM_COMPARE [31:0] $end
$var parameter 32 1 UVM_NOCOMPARE [31:0] $end
$var parameter 32 2 UVM_PRINT [31:0] $end
$var parameter 32 3 UVM_NOPRINT [31:0] $end
$var parameter 32 4 UVM_RECORD [31:0] $end
$var parameter 32 5 UVM_NORECORD [31:0] $end
$var parameter 32 6 UVM_PACK [31:0] $end
$var parameter 32 7 UVM_NOPACK [31:0] $end
$var parameter 32 8 UVM_PHYSICAL [31:0] $end
$var parameter 32 9 UVM_ABSTRACT [31:0] $end
$var parameter 32 : UVM_READONLY [31:0] $end
$var parameter 32 ; UVM_NODEFPRINT [31:0] $end
$var parameter 32 < UVM_MACRO_EXTRAS [31:0] $end
$var parameter 32 = UVM_FLAGS [31:0] $end
$var parameter 32 > UVM_UNPACK [31:0] $end
$var parameter 32 ? UVM_CHECK_FIELDS [31:0] $end
$var parameter 32 @ UVM_END_DATA_EXTRA [31:0] $end
$var parameter 32 A UVM_START_FUNCS [31:0] $end
$var parameter 32 B UVM_SET [31:0] $end
$var parameter 32 C UVM_SETINT [31:0] $end
$var parameter 32 D UVM_SETOBJ [31:0] $end
$var parameter 32 E UVM_SETSTR [31:0] $end
$var parameter 32 F UVM_END_FUNCS [31:0] $end
$var parameter 32 G UVM_STR_CRC_POLYNOMIAL [31:0] $end
$var parameter 32 H UVM_STDOUT [31:0] $end
$var parameter 32 I UVM_LOG_UVM_RM_RECORD [31:0] $end
$var parameter 32 J UVM_LINE_WIDTH [31:0] $end
$var parameter 32 K UVM_NUM_LINES [31:0] $end
$var parameter 32 L UVM_SMALL_STRING [31:0] $end
$var parameter 32 M UVM_LARGE_STRING [31:0] $end

$scope function uvm_hdl_check_path $end
$var integer 32 N uvm_hdl_check_path $end
$upscope $end


$scope function uvm_hdl_deposit $end
$var reg 1024 O value [1023:0] $end
$var integer 32 P uvm_hdl_deposit $end
$upscope $end


$scope function uvm_hdl_force $end
$var reg 1024 Q value [1023:0] $end
$var integer 32 R uvm_hdl_force $end
$upscope $end


$scope task uvm_hdl_force_time $end
$var reg 1024 S value [1023:0] $end
$var time 64 T force_time $end
$upscope $end


$scope function uvm_hdl_release_and_read $end
$var reg 1024 U value [1023:0] $end
$var integer 32 V uvm_hdl_release_and_read $end
$upscope $end


$scope function uvm_hdl_release $end
$var integer 32 W uvm_hdl_release $end
$upscope $end


$scope function uvm_hdl_read $end
$var reg 1024 X value [1023:0] $end
$var integer 32 Y uvm_hdl_read $end
$upscope $end


$scope function uvm_dpi_get_next_arg_c $end
$var integer 32 Z init $end
$upscope $end


$scope function uvm_dpi_get_tool_name_c $end
$upscope $end


$scope function uvm_dpi_get_tool_version_c $end
$upscope $end


$scope function uvm_dpi_get_next_arg $end
$var integer 32 [ init $end
$upscope $end


$scope function uvm_dpi_get_tool_name $end
$upscope $end


$scope function uvm_dpi_get_tool_version $end
$upscope $end


$scope function uvm_dpi_regcomp $end
$upscope $end


$scope function uvm_dpi_regexec $end
$var integer 32 \ uvm_dpi_regexec $end
$upscope $end


$scope function uvm_dpi_regfree $end
$upscope $end


$scope function uvm_re_match $end
$var integer 32 ] uvm_re_match $end
$upscope $end


$scope function uvm_dump_re_cache $end
$upscope $end


$scope function uvm_glob_to_re $end
$upscope $end


$scope function uvm_revision_string $end
$upscope $end


$scope function uvm_radix_to_string $end
$var integer 32 ^ radix $end
$upscope $end


$scope function uvm_instance_scope $end
$var reg 8 _ c [7:0] $end
$var integer 32 ` pos $end

$scope begin 1unnblk $end
$var integer 32 a dot_pos $end
$var integer 32 b slash_cnt $end
$var integer 32 c slash_pos $end
$upscope $end

$upscope $end


$scope function uvm_oneway_hash $end
$var integer 32 d seed $end
$var integer 32 e uvm_oneway_hash $end
$var reg 1 f msb $end
$var reg 8 g current_byte [7:0] $end
$var reg 32 h crc1 [31:0] $end
$upscope $end


$scope function uvm_create_random_seed $end
$var integer 32 i uvm_create_random_seed $end
$upscope $end


$scope function uvm_object_value_str $end
$upscope $end


$scope function uvm_leaf_scope $end
$var reg 8 j scope_separator [7:0] $end
$var reg 8 k bracket_match [7:0] $end
$var integer 32 l pos $end
$var integer 32 m bmatches $end
$upscope $end


$scope function get_radix_string_global $end
$var integer 32 n radix $end
$upscope $end


$scope function uvm_bitstream_to_string $end
$var reg 4096 o value [4095:0] $end
$var integer 32 p size $end
$var integer 32 q radix $end

$scope begin 24unnblk $end
$var reg 4096 r _t [4095:0] $end
$upscope $end

$upscope $end


$scope function uvm_integral_to_string $end
$var reg 64 s value [63:0] $end
$var integer 32 t size $end
$var integer 32 u radix $end

$scope begin 26unnblk $end
$var reg 64 v _t [63:0] $end
$upscope $end

$upscope $end


$scope function uvm_vector_to_string $end
$var reg 4096 w value [4095:0] $end
$var integer 32 x size $end
$var integer 32 y radix $end
$upscope $end


$scope function uvm_get_array_index_int $end
$var reg 1 z is_wildcard $end
$var integer 32 { uvm_get_array_index_int $end
$var integer 32 | i $end
$upscope $end


$scope function uvm_get_array_index_string $end
$var reg 1 } is_wildcard $end
$var integer 32 ~ i $end
$upscope $end


$scope function uvm_is_array $end
$var reg 1 !! uvm_is_array $end
$upscope $end


$scope function uvm_has_wildcard $end
$upscope $end


$scope function m_uvm_string_queue_join $end
$upscope $end


$scope task run_test $end
$upscope $end


$scope function global_stop_request $end
$upscope $end


$scope function set_global_timeout $end
$var time 64 "! timeout $end
$var reg 1 #! overridable $end
$upscope $end


$scope function set_global_stop_timeout $end
$var time 64 $! timeout $end
$upscope $end


$scope function uvm_get_report_object $end
$upscope $end


$scope function uvm_report_enabled $end
$var integer 32 %! verbosity $end
$var reg 2 &! severity $end
$var integer 32 '! uvm_report_enabled $end
$upscope $end


$scope function uvm_report $end
$var reg 2 (! severity $end
$var integer 32 )! verbosity $end
$var integer 32 *! line $end
$var reg 1 +! report_enabled_checked $end
$upscope $end


$scope function m__uvm_report_dpi $end
$var integer 32 ,! severity $end
$var integer 32 -! verbosity $end
$var integer 32 .! line $end
$upscope $end


$scope function uvm_report_info $end
$var integer 32 /! verbosity $end
$var integer 32 0! line $end
$var reg 1 1! report_enabled_checked $end
$upscope $end


$scope function uvm_report_warning $end
$var integer 32 2! verbosity $end
$var integer 32 3! line $end
$var reg 1 4! report_enabled_checked $end
$upscope $end


$scope function uvm_report_error $end
$var integer 32 5! verbosity $end
$var integer 32 6! line $end
$var reg 1 7! report_enabled_checked $end
$upscope $end


$scope function uvm_report_fatal $end
$var integer 32 8! verbosity $end
$var integer 32 9! line $end
$var reg 1 :! report_enabled_checked $end
$upscope $end


$scope function uvm_process_report_message $end
$upscope $end


$scope function uvm_string_to_severity $end
$var reg 2 ;! sev $end
$var reg 1 <! uvm_string_to_severity $end
$upscope $end


$scope function uvm_string_to_action $end
$upscope $end


$scope function set_config_int $end
$var reg 4096 =! value [4095:0] $end
$upscope $end


$scope function set_config_object $end
$var reg 1 >! clone $end
$upscope $end


$scope function set_config_string $end
$upscope $end


$scope function uvm_is_match $end
$var reg 1 ?! uvm_is_match $end
$upscope $end


$scope function uvm_string_to_bits $end
$var reg 115200 @! uvm_string_to_bits [115199:0] $end
$upscope $end


$scope function uvm_bits_to_string $end
$var reg 115200 A! str [115199:0] $end
$upscope $end


$scope task uvm_wait_for_nba_region $end
$var integer 32 B! nba $end
$var integer 32 C! next_nba $end
$upscope $end


$scope function uvm_split_string $end
$upscope $end


$scope function uvm_hdl_concat2string $end
$upscope $end

$upscope $end


$scope module std $end

$scope function randomize $end
$var reg 1 D! randomize $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 !
b1 "
b11111111111111111111111111111111 #
1$
b1000011111110111011111100011111 %
b10000000000 &
b1000000000000 '
b1111000000000000000000000000 (
b10001 )
b10101010101 *
b101010101 +
b101010101 ,
b0 -
b1 .
b10 /
b100 0
b1000 1
b10000 2
b100000 3
b1000000 4
b10000000 5
b100000000 6
b1000000000 7
b10000000000000 8
b100000000000000 9
b1000000000000000 :
b10000000000000000 ;
b100000000000000000 <
b100000000000000001 =
b100000000000000010 >
b100000000000000011 ?
b100000000000000100 @
b100000000000000101 A
b100000000000000110 B
b100000000000000110 C
b100000000000000111 D
b100000000000001000 E
b100000000000001000 F
b100110000010001110110110110 G
b1 H
b1000010 I
b1111000 J
b1111000 K
b1110111111 L
b11100000111111111 M
b0 N
bx O
b0 P
bx Q
b0 R
bx S
bx T
bx U
b0 V
b0 W
bx X
b0 Y
b0 Z
b0 [
b0 \
b0 ]
b0 ^
b0 _
b0 `
b0 a
b0 b
b0 c
b0 d
b0 e
0f
b0 g
b0 h
b0 i
b0 j
b0 k
b0 l
b0 m
b0 n
bx o
b0 p
b0 q
bx r
bx s
b0 t
b0 u
bx v
bx w
b0 x
b0 y
0z
b0 {
b0 |
0}
b0 ~
0!!
bx "!
0#!
bx $!
b0 %!
b0 &!
b0 '!
b0 (!
b0 )!
b0 *!
0+!
b0 ,!
b0 -!
b0 .!
b0 /!
b0 0!
01!
b0 2!
b0 3!
04!
b0 5!
b0 6!
07!
b0 8!
b0 9!
0:!
b0 ;!
0<!
bx =!
0>!
0?!
bx @!
bx A!
b0 B!
b0 C!
0D!
$end
#10
b1 '!
b10010 0!
11!
b1 !
b10 "
#20
b10101 0!
b10 !
b100 "
#30
b11000 0!
b11 !
b1000 "
#40
b11011 0!
